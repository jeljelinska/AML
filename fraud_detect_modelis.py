# -*- coding: utf-8 -*-
"""Fraud_detect_modelis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qsStJxOLV-EsFdvBzjAebXR5K7QuQ6G7
"""

import pandas as pd
import math
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import random
from sklearn.metrics import confusion_matrix
df=pd.read_excel('Synthetic Data_FA-ICC_28.07.2023 (003)_Statical.xlsx', sheet_name='Transactions') # datu ielade
df=df.iloc[:, : 15] # tikai pirmajas 15 kolonnas ir svariga info

not_frauds = df.query('cluster == 0')
frauds = df.query('cluster == 1')
not_frauds['cluster'].value_counts(), frauds['cluster'].value_counts()

balanced_df = pd.concat([frauds, not_frauds.sample(len(frauds), random_state=1)]) # jaizbalanse fraud un not_fraud gadijumu
balanced_df_np = balanced_df.to_numpy()

x_train_b, y_train_b = balanced_df_np[:150000, :-1], balanced_df_np[:150000, -1].astype(int)
x_test_b, y_test_b = balanced_df_np[150000:165000, :-1], balanced_df_np[150000:165000, -1].astype(int)
x_val_b, y_val_b = balanced_df_np[165000:, :-1], balanced_df_np[165000:, -1].astype(int)
x_train_b.shape, y_train_b.shape, x_test_b.shape, y_test_b.shape, x_val_b.shape, y_val_b.shape

def neural_net_predictions(model, x):
    return (model.predict(x).flatten() > 0.5).astype(int) # nevajag speleties ar treshhold values, jo sis modelis ir vienkars, bet ja loti gribas....

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, BatchNormalization, Dropout, InputLayer
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from tensorflow.keras.optimizers import Adam

# NN
model = Sequential()
model.add(InputLayer((x_train_b.shape[1],)))

# pirmais pasleptais slanis
model.add(Dense(64, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))

# otrais slanis
model.add(Dense(32, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))

# klasifikacija - ir fraud vai nav
model.add(Dense(1, activation='sigmoid'))

# kompilesana
model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy', 'Recall']) # recall, jo ir loti svarigi ka pareizi klasifice '1', kuru ir mazakums

# callbacks
checkpoint = ModelCheckpoint('best_model.h5', monitor='val_recall', mode='max', save_best_only=True, verbose=1)
early_stopping = EarlyStopping(monitor='val_recall', mode='max', patience=5, verbose=1, restore_best_weights=True)

# train_model
history = model.fit(
    x_train_b, y_train_b,
    validation_data=(x_val_b, y_val_b),
    epochs=50, # vairak nevajag, sakas overfits
    batch_size=16,  # piemekklets
    callbacks=[checkpoint, early_stopping],
    verbose=1
)

from sklearn.metrics import classification_report
print(classification_report(y_test_b, neural_net_predictions(model, x_test_b), target_names=['Not Fraud', 'Fraud']))